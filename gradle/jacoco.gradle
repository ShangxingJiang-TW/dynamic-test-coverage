import javax.xml.parsers.DocumentBuilder
import javax.xml.parsers.DocumentBuilderFactory

apply plugin: 'jacoco'
jacoco {
    toolVersion = "0.8.11"
    // default directory: layout.buildDirectory.dir("reports/jacoco")
//    reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}

def configFile = file('gradle/config.properties')
def config = new Properties()
config.load(new FileInputStream(configFile))
def minimumCoverage = config.getProperty('minimum_coverage').toBigDecimal()
def bufferForCoverage = config.getProperty('coverage_buffer').toBigDecimal()

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.required = true
        html.required = true
        csv.required = false
//        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
    finalizedBy jacocoTestCoverageVerification
}

// if there is already have a report result, it will directly use it
jacocoTestCoverageVerification {
    dependsOn jacocoTestReport
    violationRules {
        // global rule
        rule {
            limit {
                minimum = (minimumCoverage - bufferForCoverage) / 100
            }
        }

        // per package rule
        rule {
            enabled = false   // not enabled
            element = 'CLASS' // use class as dimension
            // all classes under the package
            includes = ['io.reflectoring.buckpal.application.domain.model.*']
            limit {
                counter = 'LINE'
                value = 'TOTALCOUNT'
                maximum = 20    // missed line count should be less than 20
            }
        }
    }
}

task updateMinimumCoverage {
    dependsOn jacocoTestReport
    doLast {
        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance()
        // Configure the factory to ignore DTD declarations
        dbf.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false)
        DocumentBuilder db = dbf.newDocumentBuilder()
        def reportFile = file('build/reports/jacoco/test/jacocoTestReport.xml')
        def coverageDoc = db.parse(reportFile)

        def counters = coverageDoc.getElementsByTagName('counter')
        def counterList = (0..<counters.getLength()).collect { counters.item(it) }
        def instructionCounters = counterList.findAll { it.getAttribute('type') == 'INSTRUCTION' }
        def lastInstructionCounter = instructionCounters.get(instructionCounters.size() - 1)

        def covered = lastInstructionCounter.getAttribute('covered').toBigDecimal()
        def missed = lastInstructionCounter.getAttribute('missed').toBigDecimal()
        def currentCoverage =(covered / (covered + missed) * 100).setScale(2, BigDecimal.ROUND_HALF_UP)
        config.setProperty('minimum_coverage', currentCoverage.toString())
        config.store(configFile.newWriter(), "Config for unit test coverage")
    }
}
